{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { BurgerContext } from \"../context/burgerContext\";\nimport { Burgers } from \"../pages/home/homestyled\";\nexport default function useToppings(db_url, burger_toppings) {\n  _s();\n\n  const [toppings, setToppings] = useState();\n  const [error, setError] = useState({\n    msg: \"\",\n    status: false\n  });\n  const {\n    burger\n  } = useContext(BurgerContext);\n  const [isLoading, setIsLoading] = useState(true);\n  if (!burger_toppings && JSON.parse(localStorage.getItem(\"burger\"))) burger_toppings = JSON.parse(localStorage.getItem(\"burger\")).consists_of;\n\n  const difference = (toppings, my_toppings) => {\n    let tmpToppings = toppings;\n\n    for (let i = 0; i < toppings.length; i++) {\n      for (let j = 0; j < my_toppings.length; j++) {\n        if (toppings[i].name === my_toppings[j].name && my_toppings[j].quantity > 0) {\n          tmpToppings[i].quantity = my_toppings[j].quantity;\n        }\n      }\n    }\n\n    tmpToppings = tmpToppings.sort((a, b) => b.quantity - a.quantity);\n    return tmpToppings;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(db_url).then(res => res.json()).then(res => {\n      let newToppings = difference(res, burger_toppings);\n      setToppings(newToppings);\n      setIsLoading(false);\n    }).catch(e => {\n      setIsLoading(true);\n      setError({\n        msg: \"Виникла помилка\" + e,\n        status: true\n      });\n    });\n  }, [db_url, burger]);\n  return {\n    toppings,\n    error,\n    isLoading\n  };\n}\n\n_s(useToppings, \"KMJTPPuq/MM5Y3EiSb2L/Et3lfo=\");","map":{"version":3,"sources":["/Users/rostyk/Desktop/macscreen/front/src/hooks/useToppings.js"],"names":["React","useContext","useEffect","useState","BurgerContext","Burgers","useToppings","db_url","burger_toppings","toppings","setToppings","error","setError","msg","status","burger","isLoading","setIsLoading","JSON","parse","localStorage","getItem","consists_of","difference","my_toppings","tmpToppings","i","length","j","name","quantity","sort","a","b","fetch","then","res","json","newToppings","catch","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,eAA7B,EAA8C;AAAA;;AAC3D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,EAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC;AAAEU,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,MAAM,EAAE;AAAnB,GAAD,CAAlC;AACA,QAAM;AAACC,IAAAA;AAAD,MAAWd,UAAU,CAACG,aAAD,CAA3B;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,MAAI,CAACK,eAAD,IAAoBU,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAxB,EACEb,eAAe,GAAGU,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,EAA2CC,WAA7D;;AAEF,QAAMC,UAAU,GAAG,CAACd,QAAD,EAAWe,WAAX,KAA2B;AAC5C,QAAIC,WAAW,GAAGhB,QAAlB;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAAQ,CAACkB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACG,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3C,YAAInB,QAAQ,CAACiB,CAAD,CAAR,CAAYG,IAAZ,KAAqBL,WAAW,CAACI,CAAD,CAAX,CAAeC,IAApC,IAA4CL,WAAW,CAACI,CAAD,CAAX,CAAeE,QAAf,GAA0B,CAA1E,EAA6E;AACzEL,UAAAA,WAAW,CAACC,CAAD,CAAX,CAAeI,QAAf,GAA0BN,WAAW,CAACI,CAAD,CAAX,CAAeE,QAAzC;AACH;AACF;AACF;;AACDL,IAAAA,WAAW,GAAGA,WAAW,CAACM,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAACH,QAAF,GAAaE,CAAC,CAACF,QAAzC,CAAd;AACA,WAAOL,WAAP;AACD,GAXD;;AAaAvB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAiB,IAAAA,KAAK,CAAC3B,MAAD,CAAL,CACG4B,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACb,UAAIE,WAAW,GAAGf,UAAU,CAACa,GAAD,EAAM5B,eAAN,CAA5B;AACAE,MAAAA,WAAW,CAAC4B,WAAD,CAAX;AACArB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KANH,EAOGsB,KAPH,CAOUC,CAAD,IAAO;AACZvB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,GAAG,EAAE,oBAAoB2B,CAA3B;AAA8B1B,QAAAA,MAAM,EAAE;AAAtC,OAAD,CAAR;AACD,KAVH;AAWD,GAbQ,EAaN,CAACP,MAAD,EAASQ,MAAT,CAbM,CAAT;AAeA,SAAO;AAAEN,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBK,IAAAA;AAAnB,GAAP;AACD;;GArCuBV,W","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { BurgerContext } from \"../context/burgerContext\";\nimport { Burgers } from \"../pages/home/homestyled\";\n\nexport default function useToppings(db_url, burger_toppings) {\n  const [toppings, setToppings] = useState();\n  const [error, setError] = useState({ msg: \"\", status: false });\n  const {burger} = useContext(BurgerContext)\n  const [isLoading, setIsLoading] = useState(true);\n  if (!burger_toppings && JSON.parse(localStorage.getItem(\"burger\")))\n    burger_toppings = JSON.parse(localStorage.getItem(\"burger\")).consists_of;\n\n  const difference = (toppings, my_toppings) => {\n    let tmpToppings = toppings;\n    for (let i = 0; i < toppings.length; i++) {\n      for (let j = 0; j < my_toppings.length; j++) {\n        if (toppings[i].name === my_toppings[j].name && my_toppings[j].quantity > 0) {\n            tmpToppings[i].quantity = my_toppings[j].quantity;\n        } \n      }\n    }\n    tmpToppings = tmpToppings.sort((a,b) => b.quantity - a.quantity)\n    return tmpToppings;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(db_url)\n      .then((res) => res.json())\n      .then((res) => {\n        let newToppings = difference(res, burger_toppings);\n        setToppings(newToppings);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        setIsLoading(true);\n        setError({ msg: \"Виникла помилка\" + e, status: true });\n      });\n  }, [db_url, burger]);\n\n  return { toppings, error, isLoading };\n}\n"]},"metadata":{},"sourceType":"module"}