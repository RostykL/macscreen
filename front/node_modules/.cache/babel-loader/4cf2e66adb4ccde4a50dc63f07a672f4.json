{"ast":null,"code":"var _jsxFileName = \"/Users/rostyk/Desktop/macscreen/front/src/pages/redo/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { Wrapper } from \"../../styled/general\";\nimport { Menu, MenuTitle } from \"../home/homestyled\";\nimport { BurgerIngridients, IngridientWrapper, BurgerDetails, DetailsTitle, IngridientsDetails } from \"./burgerredostyled\";\nimport Ingridient from \"../../component/Ingridient\";\nimport { BurgerContext } from \"../../context/burgerContext\";\nimport useToppings from \"../../hooks/useToppings\";\nimport IngridientdetailBlock from \"../../component/IngridientsDetailBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Index() {\n  _s();\n\n  const {\n    burger,\n    setBurger\n  } = useContext(BurgerContext);\n  const {\n    error,\n    isLoading,\n    allToppings\n  } = useToppings(\"http://localhost:3000/toppings\", burger ? burger.consists_of : []);\n  const [toppings, setToppings] = useState([]);\n  useEffect(() => {\n    setBurger(JSON.parse(localStorage.getItem(\"burger\")));\n  }, []);\n  const [number, setNumber] = useState({\n    c: 0,\n    t: ''\n  });\n\n  const add = (text, num) => {\n    for (let i = 0; i < allToppings.length; i++) {\n      if (allToppings[i].name === text) {\n        allToppings[i].quantity = num;\n      }\n    }\n\n    setNumber({\n      c: number,\n      t: text\n    });\n    setToppings(allToppings.filter(el => el.quantity > 0));\n  };\n\n  useEffect(() => {\n    for (let i = 0; i < toppings.length; i++) {\n      if (toppings && toppings[i].name === number.t) {\n        toppings[i].quantity = number.c;\n      }\n    }\n  }, [number]);\n  if (!isLoading) return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Menu, {\n      children: [/*#__PURE__*/_jsxDEV(MenuTitle, {\n        children: burger && burger.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IngridientWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(BurgerIngridients, {\n          children: allToppings && allToppings.map(({\n            name,\n            quantity,\n            id\n          }) => {\n            return /*#__PURE__*/_jsxDEV(Ingridient, {\n              text: name,\n              add: add,\n              initValue: 0\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BurgerDetails, {\n          children: [/*#__PURE__*/_jsxDEV(DetailsTitle, {\n            children: [burger && burger.name, \" | \\u0456\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0456\\u044F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IngridientsDetails, {\n            children: toppings.map(el => {\n              return /*#__PURE__*/_jsxDEV(IngridientdetailBlock, {\n                text: el.name,\n                price: el.quantity * el.cost\n              }, el.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(Menu, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Index, \"IF9+pyx8fPYP9oi9Akn/mYyXDWg=\", false, function () {\n  return [useToppings];\n});\n\n_c = Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/rostyk/Desktop/macscreen/front/src/pages/redo/index.js"],"names":["React","useEffect","useState","useContext","Wrapper","Menu","MenuTitle","BurgerIngridients","IngridientWrapper","BurgerDetails","DetailsTitle","IngridientsDetails","Ingridient","BurgerContext","useToppings","IngridientdetailBlock","Index","burger","setBurger","error","isLoading","allToppings","consists_of","toppings","setToppings","JSON","parse","localStorage","getItem","number","setNumber","c","t","add","text","num","i","length","name","quantity","filter","el","map","id","cost"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\n\nimport { Wrapper } from \"../../styled/general\";\nimport { Menu, MenuTitle } from \"../home/homestyled\";\n\nimport {\n  BurgerIngridients,\n  IngridientWrapper,\n  BurgerDetails,\n  DetailsTitle,\n  IngridientsDetails,\n} from \"./burgerredostyled\";\nimport Ingridient from \"../../component/Ingridient\";\n\nimport { BurgerContext } from \"../../context/burgerContext\";\nimport useToppings from \"../../hooks/useToppings\";\nimport IngridientdetailBlock from \"../../component/IngridientsDetailBlock\";\n\nexport default function Index() {\n  const { burger, setBurger } = useContext(BurgerContext);\n\n  const { error, isLoading, allToppings } = useToppings(\n    \"http://localhost:3000/toppings\",\n    burger ? burger.consists_of : []\n  );\n  const [toppings, setToppings] = useState([]);\n\n  useEffect(() => {\n    setBurger(JSON.parse(localStorage.getItem(\"burger\")));\n  }, []);\n\n  const [number, setNumber] = useState({c:0,t:''});\n\n  const add = (text, num) => {\n    for (let i = 0; i < allToppings.length; i++) {\n      if (allToppings[i].name === text) {\n        allToppings[i].quantity = num;\n      }\n    }\n    setNumber({c: number, t: text})\n    setToppings(allToppings.filter(el => el.quantity > 0))\n  };\n\n  useEffect(() => {\n    for(let i = 0; i < toppings.length; i++) {\n      if(toppings && toppings[i].name === number.t) {\n        toppings[i].quantity = number.c;\n      }\n    }\n  }, [number])\n\n  if (!isLoading)\n    return (\n      <Wrapper>\n        <Menu>\n          <MenuTitle>{burger && burger.name}</MenuTitle>\n          <IngridientWrapper>\n            <BurgerIngridients>\n              {allToppings &&\n                allToppings.map(({ name, quantity, id }) => {\n                  return (\n                    <Ingridient\n                      key={id}\n                      text={name}\n                      add={add}\n                      initValue={0}\n                    />\n                  );\n                })}\n            </BurgerIngridients>\n            <BurgerDetails>\n              <DetailsTitle>{burger && burger.name} | інформація</DetailsTitle>\n              <IngridientsDetails>\n                {toppings.map((el) => {\n                  return (\n                    <IngridientdetailBlock\n                      key={el.id}\n                      text={el.name}\n                      price={el.quantity * el.cost}\n                    ></IngridientdetailBlock>\n                  );\n                })}\n              </IngridientsDetails>\n            </BurgerDetails>\n          </IngridientWrapper>\n        </Menu>\n      </Wrapper>\n    );\n\n  if (isLoading) {\n    return (\n      <Wrapper>\n        <Menu>Loading...</Menu>\n      </Wrapper>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}